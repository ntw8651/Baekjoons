#include <iostream>

int main() {
  /*
  첫째 줄에 사람의 수 N과 파티의 수 M이 주어진다.

둘째 줄에는 이야기의 진실을 아는 사람의 수와 번호가 주어진다. 진실을 아는 사람의 수가 먼저 주어지고 그 개수만큼 사람들의 번호가 주어진다. 사람들의 번호는 1부터 N까지의 수로 주어진다.

셋째 줄부터 M개의 줄에는 각 파티마다 오는 사람의 수와 번호가 같은 방식으로 주어진다.

N, M은 50 이하의 자연수이고, 진실을 아는 사람의 수는 0 이상 50 이하의 정수, 각 파티마다 오는 사람의 수는 1 이상 50 이하의 정수이다.*/
  int N, M;
  bool peoples[51] = {};//true 알고 있는 사람 false 아싸
  int partys[51][51] = {{}};//첫번째칸은 사람수
  scanf("%d %d", &N, &M);
  //진실 아는 사람
  int Mans = 0;
  scanf("%d", &Mans);
  for(int i = 0; i<Mans; i++){
    int Man = 0;
    scanf("%d", &Man);
    peoples[Man] = true;
  }
  
  //파티 입력
  for(int i = 0; i<M; i++){
    scanf("%d", &partys[i][0]);
    for(int j = 1; j<=partys[i][0]; j++){
      scanf("%d", &partys[i][j]);
    }
  }
  bool complete = false;
  int count = M;
  //이제 모두 거를 때까지 반복 아니 근데 어차피 50*50정도니까 for문 돌려도 될듯?
  while(!complete){
    complete = true;
    for(int i = 0; i<M; i++){
      for(int j = 1; j<=partys[i][0]; j++){
        if(peoples[partys[i][j]] == true){
          for(int k = 1; k<=partys[i][0]; k++){
            peoples[partys[i][k]] = 1;
          }
          partys[i][0] = -1;
          complete = false;
          count -= 1;
        }
      }
    }
  }
  printf("%d", count);
  /*
  대충 좀비 감염과 같은 느낌
  우선 진실맨들이 있는 파티는 모두 배제
  최대한 진실맨이 없는 파티부터 가야지 진실이야기를 안 퍼뜨릴 수 있는거잖아
  진실맨이 없는 어...근데 이게 좀 에바인 부분이
  진실을 들은 애한테서 들은 애한테서 들은 애한테로 전염되는 진실은 어카지
  좀 복잡해지는데

  아니 그냥 진짜 감염 게임처럼 무지성 앞에서부터 한다고 문제가 풀릴 리가 없잖아 순서에 따라 상관있을 수 있지 않을까
  이 경우에는 12, 34에 가고 23을 마지막에 가는 게 최선이잖아?
  만약 처음부터 23을 가면 바로 망해버리는데
  이걸 어떻게 배제하지? 이런 상황을?
  가장 1차원적인 방법은 당연히 모든 경우의 수를 들어갔다 나오는 건데
  감염된지 확인하는 이것들이 배열을 필요로 할 거란 말이야 그러면 dfs든 bfs든 배열을 넘겨줄텐데 이게 만만치않게 오래걸린단 말이지 엄청 비효율적이고
  근데 어차피 50명이고 10파티면 어... 55번의 연산정도인데 그걸 10!번 한다고? 그럼 좀 문젠데 아니면 참여율이 가장 적은 파티로? 아싸가 뭉쳐있는 파티라면 근데 이것도 확률적일 뿐이지 않나
  엥?? 파팅 참여 순서를 개무시한다고? 뭐지 저거 3번아닌가? 최대 3번 구라치기 가능 아님?? 2 3 4해서 아니 1이랑 4랑 같이 파티한다고해서 안되는 아 이게 나중에라도 듣게 된다면 안된다 뭐 그런건가?
  그렇네~그럼 좀 더 쉬워지지
  그냥 진짜 아에 전혀 진실과 관련이 없는 아싸(나)같은 사람만 찾으면 되는구나~~ㅎㅎ...
  */
}